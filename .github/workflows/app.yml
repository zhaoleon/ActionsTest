name: 'NCar-Unreal-Builder'
run-name: |
  " ${{ inputs.build_config != '' && inputs.build_config || 'Development' }} 
  | ${{ inputs.platform != '' && inputs.platform || 'Linux' }} 
  | ${{ (inputs.archive || startsWith(github.ref, 'refs/tags')) && 'Release' || 'NoRelease' }} 
  | ${{ github.event_name == 'push' && 'Push' || github.event_name == 'workflow_dispatch' && 'Dispatch' }} "

on:
  push:
    branches:
      - '**'
    paths:
      - '**'
    tags:
      - '**'
  workflow_dispatch:
    inputs:
      app_version:
        description: 'The version of the app to be built, if empty it would be workflow run number'
        required: false
        default: ''
      # environment variable might will be used in CD process to deploy artifact on specific deployment environment which is unavailable temporarily
      # environment:
      #   description: 'The deployment environment'
      #   required: true
      #   type: choice
      #   options:
      #     - 'DEV '
      #     - 'UAT '
      #     - 'PROD'
      #   default: 'DEV'
      build_config:
        description: 'Configuration to use'
        type: choice
        required: true
        options:
          - 'Development'
          - 'DebugGame'
          - 'Shipping'
        default: 'Development'
      # platform:
      #   description: 'Platform to build for'
      #   type: choice
      #   required: false
      #   options:
      #     - 'Win64'
      #     - 'Linux'
      #   default: 'Linux'
      maps:
        description: 'Maps to be packaged'
        required: false
      archive:
        description: 'Whether to archive'
        type: boolean
        required: true
        default: true

env: 
  app_version: ${{ inputs.app_version !='' && inputs.app_version || '' }}
  # environment: ${{ inputs.environment != '' && inputs.environment || 'DEV' }} 
  build_config: ${{ inputs.build_config !='' && inputs.build_config || 'Development' }} 
  platform: 'Linux' 
  # ${{ inputs.platform !='' && inputs.platform || 'Linux' }} 
  archive: ${{ (inputs.archive && true) && 'true' || 'false' }}
  archive_path: '${{ github.workspace }}/Output/'
  maps: ${{ inputs.maps !='' && inputs.maps || '' }}

  s3_bucket: 's3://ncar-cicd-artifact'
  s3_object_url: 'https://ncar-cicd-artifact.s3.ap-southeast-1.amazonaws.com'
  UatPath: '/home/ubuntu/UnrealEngine/Engine/Build/BatchFiles/RunUAT.sh'

jobs:
  build-app:
    name: Build unreal project
    runs-on: [self-hosted, Linux, linux-x64-ue541]

    steps:
      # Clean the workspace by deleting the old version
      - name: Clean workspace
        run: |
          echo 'Deleting existing workspace: ${{ github.workspace }} before checkout the repo to ensure the project file is fresh'
          rm -rf ${{ github.workspace }}/*
          echo 'Env: whether push has tags: ${{ startsWith(github.ref, 'refs/tags') }}'
          echo 'Env: archive value: ${{ env.archive }}'

      - name: Checkout project
        uses: actions/checkout@v4
        with: 
          lfs: true
          fetch-depth: 0
          repository: ${{ github.repository }}

      - name: Build cook package
        id: build-cook-package        
        run: |
          m_archivePath=${{ env.archive_path }}
          if [ "${m_archivePath:-1}"!="/"];then
            m_archivePath="${{ env.archive_path }}/"
          fi

          echo 'Package archive path is: '${{ env.archive_path }}

          # Make sure there is only one uproject file in the project.
          uprojectCount=$(find .. -type f -name "*.uproject" | wc -l) 

          if [ "$uprojectCount" != 1 ]; then
            echo "::error::$uprojectCount uproejct files exist.Please make sure there is only one uproject file in the project!"
            exit 3
          fi

          # Search for *.uproject file in the upper folder and change the relative path into absolute
          uprojectPath=$(find .. -type f -name "*.uproject" | xargs -0 -I {} readlink -f {})

          releaseArg=${{ env.archive == 'true' || startsWith(github.ref, 'refs/tags') }}
          echo 'Build cook: releaseArg is: '$releaseArg
          if $releaseArg; then
            archiveArg="-archive -archivedirectory=${{ env.archive_path }}"
          else
            archiveArg=""
          fi

          command="${{ env.UatPath }} BuildCookRun -project=$uprojectPath -clientconfig=${{ env.build_config }} -platform=${{ env.platform }} $mapsArg -clean -cook -stage -pak -package $archiveArg -encryptinifiles -noP4 -build -unattended -utf8output -RunAutomationTests"

          echo -e "buildcookrun commandline is:\n"$command
          sh -c "$command"
      
      - name: Compress output
        if: ${{ env.archive == 'true' || startsWith(github.ref, 'refs/tags') }}
        id: compress-output
        run: |
          # Check archive path exist
          if [ ! -d "${{ env.archive_path }}" ]; then
            echo "Compress output error: Package failed, archive output folder does not exist..."
            exit 2
          fi

          # Rename the archive to add the version number
          for dir in ${{ env.archive_path }}*
          do
            echo "Compress output: list files or folders: "$dir
            if ${{ startsWith(github.ref, 'refs/tags') }}; then
              version_name="_"$(basename ${{ github.ref }})
            else
              if ${{ env.app_version != '' }}; then
                version_name=_${{ env.app_version }}
              else
                version_name=''
              fi
            fi

            new_name="NCar_Linux""$version_name""."${{ github.run_number }}
            new_name_path="./Output/"$new_name
            echo "Compress output: Changing output folder name from: "$(basename $dir)" to: "$new_name_path
            mv "$dir" "$new_name_path"

            echo "Compress output: Compressing output files..."
            cd Output
            zip_name=$new_name".zip"
            zip_folder=$new_name/*
            zip -rqu $zip_name $zip_folder

            echo "Compress output: compress output archive completed..."      
            echo "output-path=$zip_name" >> "$GITHUB_OUTPUT"
            echo "relese=true" >> "$GITHUB_OUTPUT"
            echo "Compress output: zip file is: "$zip_name
          done

      - name: Show compress result
        if: ${{ env.archive == 'true' || startsWith(github.ref, 'refs/tags') }}
        run: |
          echo "Compress output: zip file is in ./Output/"${{ steps.compress-output.outputs.output-path }}

      - name: Upload archive to S3
        id: upload-archive
        if: ${{ env.archive == 'true' || startsWith(github.ref, 'refs/tags') }}
        run: |
          echo "Upload: uploading to a wonderful S3 bucket."

          # Set the s3 upload url
          s3_url=${{ env.s3_bucket }}/${{ env.platform }}/${{ env.build_config }}/${{ steps.compress-output.outputs.output-path }}
          s3_url_nobucket=${{ env.platform }}/${{ env.build_config }}/${{ steps.compress-output.outputs.output-path }}
          aws s3 cp ./Output/${{ steps.compress-output.outputs.output-path }} $s3_url

          echo "s3_url_output=$s3_url">>"$GITHUB_OUTPUT"
          echo "s3_url_output_nobucket=$s3_url_nobucket">>"$GITHUB_OUTPUT"

          # Pass the status to clean step to determine whether the bucket should be cleaned
          echo "upload_success=true">>"$GITHUB_OUTPUT"
       
      - name: Create tag name
        if: ${{ env.archive == 'true' || startsWith(github.ref, 'refs/tags') }}
        id: create-tag-name
        run: |
          echo "Create tag name: Creating tag name..."

          if ${{ startsWith(github.ref, 'refs/tags') }}; then
            release_tag=$(basename ${{ github.ref }})"."${{ github.run_number }}
            echo "Create tag name: tag name is: "$release_tag
          else
            if ${{ env.app_version != '' }}; then
              release_tag=${{ env.app_version }}"."${{ github.run_number }}
              echo "Create tag name: tag name is: "$release_tag
            else
              release_tag=${{ github.run_number }}
              echo "Create tag name: tag name is: "$release_tag
            fi
          fi
          
          echo "tag_name=$release_tag" >> "$GITHUB_OUTPUT"

      - name: Create release
        if: ${{ env.archive == 'true' || startsWith(github.ref, 'refs/tags') }}
        id: create-release
        env:
          tag_name: ${{ steps.create-tag-name.outputs.tag_name }}
        run: |
          echo "Create release: Creating release..."    

          # Define the release name
          release_name="Release ${{env.tag_name}}"
          echo "Create release: release title is: $release_name"

          # Define the Markdown body for the release
          request_body="### Artifact download URI \\n ${{ steps.upload-archive.outputs.s3_url_output }}\\n\\n### Artifact download object URL \\n ${{ env.s3_object_url }}/${{ steps.upload-archive.outputs.s3_url_output_nobucket  }}"

          # Escape double quotes
          escaped_request_body=$(echo "$request_body" | sed 's/"/\\"/g')

          # Create the release
          response=$(curl \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d "{
              \"tag_name\": \"${{env.tag_name}}\",
              \"name\": \"$release_name\",
              \"body\": \"$escaped_request_body\",
              \"draft\": false,
              \"prerelease\": false
            }")

          echo "Create release: response is:\n$response"
      
      - name: Clean s3 bucket
        if: failure() || cancelled()
        id: clean-s3
        run: |
          if  ${{ steps.upload-archive.outputs.upload_success == 'true' }}; then
            echo "Clean s3: Archive already has been uploaded to s3 bucket, but the following steps were not completed successfully, delete the s3 object..."
            aws s3 rm ${{ steps.upload-archive.outputs.s3_url_output}}
          fi

      - name: Clean artifact
        if: always()
        id: clean-artifact
        run: |
          echo "Deleting intermediate artifact..."
          rm -rf ${{ github.workspace }}/*
