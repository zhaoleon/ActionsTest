name: "NCar-Unreal-Builder"

on:
  workflow_dispatch:
    inputs:
      app_version:
        description: "The version of the app to be built"
        required: true
        default: "0.1.2400.1"
      environment:
        description: "The deployment environment"
        required: true
        type: choice
        options:
          - "DEV"
          - "UAT"
          - "PROD"
        default: "DEV"
      changelog:
        description: "Built app changelog"
        required: true
        default: "Test"
      upload_artifacts:
        description: "Enable upload of the app artifact to Github"
        type: boolean
        default: false
      build_config:
        description: "Configuration to use"
        type: choice
        required: true
        options:
          - "Development"
          - "Debug"
          - "Shipping"
        default: "Development"
      platform:
        description: "Platform to build for"
        type: choice
        required: false
        options:
          - "Win64"
          - "Linux"
        default: "Linux"
      archive:
        description: 'Whether to archive'
        required: false
        default: 'false'
      archive_path:
        description: 'Archive Path'
        required: false

run-name: ${{ format('App build | {0} | {1}', inputs.app_version, inputs.environment) }}

jobs:
  build-app:
      runs-on: self-hosted
        
      steps:
        - uses: actions/checkout@v4
          with: 
            lfs: true

        - run: |
            #!/bin/bash

            runUatPath="/home/ubuntu/UE/Linux_Unreal_Engine_5.4.1/Engine/Build/BatchFiles/RunUAT.sh"
            uprojectPath="${{ github.workspace }}"
            uprojectDir=$(dirname "$uprojectPath")
            buildConfig="${{ inputs.build_config }}"
            platform="${{ inputs.platform }}"
            archive="${{ inputs.archive }}"
            archivePath="${{ inputs.archive_path }}"

            if [ "$anticheatEnabled" = 'true' ]; then
            anticheatDir="$uprojectDir/Build/NoRedist"
            mkdir -p "$anticheatDir"
            privateKeyPath="$anticheatDir/base_private.key"
            publicCertPath="$anticheatDir/base_public.cer"
            echo "$anticheatPrivateKey" | base64 --decode > "$privateKeyPath"
            echo "$anticheatPublicCert" | base64 --decode > "$publicCertPath"
            echo "Anticheat keys have been written to $anticheatDir"
            fi

            archiveArg=$( [ "$archive" = 'true' ] && echo "-archive -archivedirectory=$archivePath" )
            encryptIniArg=$( [ "$encryptIni" = 'true' ] && echo "-encryptinifiles" )
            patchArg=$( [ "$patch" != 'false' ] && echo "-generatepatch -basedonreleaseversion=$patch" )
            mapsArg=$( [ "$maps" = 'true' ] && echo "" || echo "-map=$maps" )

            command="\"$runUatPath\" BuildCookRun " +
            "-project=\" \"$uprojectPath\ActionsTest.uproject" \" " +
            "-clientconfig=$buildConfig -platform=$platform $mapsArg " +
            "-clean -cook -stage -pak -package $archiveArg -nocompileeditor -encryptinifiles" +
            "-noP4 -build -unattended -utf8output"

            echo "Executing command: $command"

            # Since direct execution of $command in Bash requires proper escaping and command formatting,
            # the actual invocation would need to be adjusted based on the specific command syntax.
            # The following is a placeholder for the actual command execution.
            sh -c "$command"

            if [ "$deletePdb" = 'true' ]; then
            find "$uprojectDir/Saved/StagedBuilds/" -type f -name "*.pdb" -exec rm -f {} \;
            fi
