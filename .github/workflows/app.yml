name: 'NCar-Unreal-Builder'

run-name: App build 

on:
  push:
  workflow_dispatch:
    inputs:
      app_version:
        description: 'The version of the app to be built, if empty it would be workflow run number'
        required: true
        default: ''
      environment:
        description: 'The deployment environment'
        required: true
        type: choice
        options:
          - 'DEV'
          - 'UAT'
          - 'PROD'
        default: 'DEV'
      build_config:
        description: 'Configuration to use'
        type: choice
        required: true
        options:
          - 'Development'
          - 'DebugGame'
          - 'Shipping'
        default: 'Development'
      platform:
        description: 'Platform to build for'
        type: choice
        required: false
        options:
          - 'Win64'
          - 'Linux'
        default: 'Linux'
      maps:
        description: 'Maps to be packaged'
        required: false
      archive:
        description: 'Whether to archive'
        type: boolean
        required: true
        default: true
      # archive_path:
      #   description: 'Archive Path'
      #   required: false
      #   default: '/home/ubuntu/ActionsOutput/'

env: 
  app_version: ${{ inputs.app_version !='' && inputs.app_version || github.run_number }}
  tag: ${{ inputs.app_version !='' && startsWith(inputs.app_version, 'v') || false }}
  environment: ${{ inputs.environment != '' && inputs.environment || 'DEV' }} 
  build_config: ${{ inputs.build_config !='' && inputs.build_config || 'Development' }} 
  platform: ${{ inputs.platform !='' && inputs.platform || 'Linux' }} 
  archive: ${{ inputs.archive && false || true }}
  archive_path: '${{ github.workspace }}/Output/'
  maps: ${{ inputs.maps !='' && inputs.maps || '' }}

jobs:
  clean-workspace:
    name: Clean the workflow workspace
    runs-on: [self-hosted, CICDForUnreal, Linux]

    steps:
      # Clean the workspace by deleting the old version
      - name: Clean workspace
        if: ${{ github.event. }}
        run: |
          echo 'Deleting existing workspace: ${{ github.workspace }} before checkout the repo to ensure the project file is fresh'
          rm -rf ${{ github.workspace }}/*

  build-app:
    name: Build unreal project
    runs-on: [self-hosted, CICDForUnreal, Linux]
    needs: clean-workspace
    outputs: 
      dispatch_release: ${{ steps.check-if-release-dispatch.outputs.publish_release }}
      push_release: ${{ steps.check-if-release-push.outputs.publish_release }}

    steps:
      - name: Checkout project
        uses: actions/checkout@v4
        with: 
          lfs: true
          fetch-depth: 0
          repository: ${{ github.repository }}

      - name: Build cook package
        uses: ./.github/actions/buildcook
        with:
          app_version: ${{ env.app_version }} 
          environment: ${{ env.environment }} 
          build_config: ${{ env.build_config }} 
          platform: ${{ env.platform }} 
          maps: ${{ env.maps}} 
          archive: ${{ env.archive }} 
          archive_path: ${{ env.archive_path }}

      - name: Check if publish release
        id: check-if-release-dispatch
        run: |
          if [ ${{ startsWith(env.app_version, 'v') }}]; then
            echo "publish_release=true" >> $GITHUB_OUTPUT
            echo 'Build: App version starts with v, it will publish to release'
          else
            echo "publish_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if publish release on push
        id: check-if-release-push
        if: ${{ startsWith(github.ref, 'refs/tags') }}
        run: |
          # TODO: check the push tag starts with v
          echo "publish_release=true" >> $GITHUB_OUTPUT
          echo 'Build: Pushed tag starts with v, it will publish to release'

  deploy:
    runs-on: [self-hosted, CICDForUnreal, Linux]
    #if: ${{ needs.build-app.outputs.dispatch_release }} || ${{ needs.build-app.outputs.push_release }}

    permissions:
      contents: write
      pull-requests: write
      repository-projects: write

    name: Create release
    needs: build-app
    
    defaults:
      run:
        working-directory: ${{ env.archive_path }} 

    env: 
      archive-name: NCarApp${{ github.env.app_version }}.${{ github.run_number }}.zip
    
    steps:
      - name: Zip archive
        run: |
          echo 'zip command: zip -rqu ${{env.archive-name}} ${{ env.archive_path }}'
          zip -rqu ${{env.archive-name}} .

      - name: Create release
        id: create_release
        run: |
          if [ -e ${{ env.archive-name }} ]; then
            echo "Create release: Creating release"
            gh release create ${{ env.app_version }} ${{ env.archive_path }}${{env.archive-name}} --generate-notes -t 'Release ${{ env.app_version }}'
          else
            echo "::error::Create release: Zip file doesn't exists"
          fi
